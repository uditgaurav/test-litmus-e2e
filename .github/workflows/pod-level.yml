---
name: Pod-Level-Pipeline
on:
  workflow_dispatch:
    inputs:
      e2eTestImage:
        default: "litmuschaos/litmus-e2e:ci"
      goExperimentImage:
        default: "litmuschaos/go-runner:ci"
      libImage:
        default: "litmuschaos/go-runner:ci"
      operatorImage:
        default: "litmuschaos/chaos-operator:ci"
      runnerImage:
        default: "litmuschaos/chaos-runner:ci"
      expTunnableNS:
        default: "experiments-tunnable"
      chaosNamespace:
        default: "litmus"
      imagePullPolicy:
        default: "Always"
      experimentImagePullPolicy:
        default: "Always"
      chaosServiceAccount:
        default: ""

jobs:

  Pod_Level_Test:
    if: always()
    runs-on: ubuntu-latest
    env:
      OPERATOR_IMAGE: "${{ github.event.inputs.operatorImage }}"
      OPERATOR_NAME: "${{ github.event.inputs.operatorName }}"
      RUNNER_IMAGE: "${{ github.event.inputs.runnerImage }}"
      IMAGE_PULL_POLICY: "${{ github.event.inputs.imagePullPolicy }}"        
      GO_EXPERIMENT_IMAGE: "${{ github.event.inputs.goExperimentImage }}"
      LIB_IMAGE: "${{ github.event.inputs.libImage }}"
      EXPERIMENT_IMAGE_PULL_POLICY: "${{ github.event.inputs.experimentImagePullPolicy }}"
      CHAOS_NAMESPACE: "${{ github.event.inputs.chaosNamespace }}"
      CHAOS_SERVICE_ACCOUNT: "${{ github.event.inputs.chaosServiceAccount }}"
      UPDATE_WEBSITE: "false"
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml   
    
    steps:

      - name: Installing Prerequisites (K3S Cluster)
        run: |
          curl -sfL https://get.k3s.io | sh -s - --docker --write-kubeconfig-mode 664
          kubectl wait node --all --for condition=ready --timeout=90s
          kubectl get nodes
          
      - name: Litmus Infra Setup In Cluster-1
        if: ${{ always() }}      
        run: |
          make build-litmus

      - name: Deploy App In Cluster-1
        if: ${{ always() }}      
        run: make app-deploy
    
      - name: TCID-EC2-GENERIC-APP-POD-DELETE
        if: ${{ always() }}      
        run: make pod-delete

      - name: TCID-EC2-GENERIC-APP-CONTAINER-KILL
        if: ${{ always() }}
        run: make container-kill

      - name: TCID-EC2-GENERIC-APP-POD-CPU-HOG
        if: ${{ always() }}
        run: make pod-cpu-hog

      - name: TCID-EC2-GENERIC-APP-POD-MEMORY-HOG
        if: ${{ always() }}
        run: make pod-memory-hog

      - name: TCID-EC2-GENERIC-APP-POD-CPU-HOG-EXEC
        if: ${{ always() }}
        run: make pod-cpu-hog-exec

      - name: TCID-EC2-GENERIC-APP-POD-MEMORY-HOG-EXEC
        if: ${{ always() }}
        run: make pod-memory-hog-exec        

      - name: TCID-EC2-GENERIC-APP-POD-NETWORK-CORRUPTION
        if: ${{ always() }}
        run: make pod-network-corruption

      - name: TCID-EC2-GENERIC-APP-POD-NETWORK-LATENCY
        if: ${{ always() }}
        run: make pod-network-latency

      - name: TCID-EC2-GENERIC-APP-POD-NETWORK-LOSS
        if: ${{ always() }}
        run: make pod-network-loss

      - name: TCID-EC2-GENERIC-APP-POD-NETWORK-DUPLICATION
        if: ${{ always() }}
        run: make pod-network-duplication

      - name: TCID-EC2-GENERIC-APP-POD-IO-STRESS
        if: ${{ always() }}
        run: make pod-io-stress

      - name: TCID-EC2-GENERIC-APP-DISK-FILL
        if: ${{ always() }}
        run: make disk-fill

  ### Runing Experiment Tunables
  Experiment_Tunables:
    if: always()
    runs-on: ubuntu-latest
    env:
      GO_EXPERIMENT_IMAGE: "${{ github.event.inputs.goExperimentImage }}"
      LIB_IMAGE: "${{ github.event.inputs.libImage }}"
      EXPERIMENT_IMAGE_PULL_POLICY: "${{ github.event.inputs.experimentImagePullPolicy }}"
      CHAOS_NAMESPACE: "${{ github.event.inputs.expTunnableNS }}"
      CHAOS_SERVICE_ACCOUNT: "${{ github.event.inputs.chaosServiceAccount }}"
      APP_NS: "${{ github.event.inputs.expTunnableNS }}"
      APP_LABEL: "app=nginx"
      UPDATE_WEBSITE: "false"
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      OPERATOR_IMAGE: "${{ github.event.inputs.operatorImage }}"
      OPERATOR_NAME: "${{ github.event.inputs.operatorName }}"
      RUNNER_IMAGE: "${{ github.event.inputs.runnerImage }}"
      IMAGE_PULL_POLICY: "${{ github.event.inputs.imagePullPolicy }}"        
    
    steps:
    
      - name: Installing Prerequisites (K3S Cluster)
        run: |
          curl -sfL https://get.k3s.io | sh -s - --docker --write-kubeconfig-mode 664
          kubectl wait node --all --for condition=ready --timeout=90s
          kubectl get nodes
          
      - name: Litmus Infra Setup In Cluster-1
        run: |
          make build-litmus

      - name: Deploy App In Cluster-1
        run: make app-deploy
        
      - name: Create Namespace and deploy Application
        run: |
          kubectl create ns ${CHAOS_NAMESPACE}
          kubectl create deploy nginx --image=nginx:alpine -n ${CHAOS_NAMESPACE}
          kubectl wait --for=condition=Ready pods --all --namespace ${CHAOS_NAMESPACE} --timeout=90s
          kubectl annotate deploy/nginx litmuschaos.io/chaos="true" -n ${CHAOS_NAMESPACE} --overwrite

      - name: TCID-EC2-GENERIC-APP-POD-AFFECTED-PERCENTAGE-TON-PARALLEL
        run: make pod-affected-perc-ton-parallel

      - name: TCID-EC2-GENERIC-APP-POD-AFFECTED-PERCENTAGE-TON-SERIES
        if: ${{ always() }}
        run: make pod-affected-perc-ton-series

      - name: TCID-EC2-GENERIC-APP-MULTIPLE-APP-DEPLOY
        if: ${{ always() }}
        run: make multiple-app-deploy

      - name: Experiment Tunables Cleanup
        if: ${{ always() }}
        run: |
          kubectl delete chaosengines --all -n ${CHAOS_NAMESPACE}
          kubectl delete ns ${CHAOS_NAMESPACE}

  ### App Cleanup

  App_Cleanup:
    needs: [Pod_Level_Test,Experiment_Tunables]
    if: always()
      env:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    runs-on: ubuntu-latest
    steps:
      - name: Application Cleanup
        run: make app-cleanup

  ### Litmus Cleanup

  Litmus_Cleanup:
    needs: App_Cleanup
    if: always()
      env:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        POD_LEVEL: "true"

    runs-on: ubuntu-latest
    steps:
      - name: Litmus Cleanup
        run: make litmus-cleanup
